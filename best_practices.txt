*******************************************************************************

В программе не должно быть непроинициализированных объектов, т.к. они являются
источником потенциальных проблем

*******************************************************************************

Свойства проекта -> Компоновщик -> Система -> Подсистема -> Консоль
Т.о. консоль не будет закрываться после исполнения программы, и, если вставить
отладочную печать, можно наблюдать работу деструкторов

*******************************************************************************

Не использовать this внутри методов, только в очень редких и исключительных
ситуациях

*******************************************************************************

Не использовать тернарный оператор

*******************************************************************************

Не использовать для строк С-строки

*******************************************************************************

То, что пишется для пользовательских типов данных, на них же и должно тестироваться

*******************************************************************************

Классы автоматически дружелюбны самим себе
Поэтому всегда можно получить доступ к private полям из другой переменной этого
же класса
Это поведение можно запретить, используя const

*******************************************************************************

Standalone- и member-функции хранятся в памяти в области кода
Отличаются областью видимости и указателем this, неявно передающимся member-функциям
для связи с объектом

*******************************************************************************

Не должно быть никаких необъяснимых/неочевидных литеральных констант, так
называемых "магических чисел"

*******************************************************************************

Никаких using namespace в хедерах, в реализациях да, иначе, тот, кто подключит такой
хедер неявно для себя подключит еще и это самое пространство имен, в итоге может
образоваться очень глубокая и запутанная вложенность
Вместо этого лучше явно указывать пространство имен через оператор расширения видимости
Все включения заголовочных файлов только в реализациях, в хедерах должны быть
только объявления типов, константы или реализация шаблона

*******************************************************************************

Добавлять члены и методы в классы по мере необходмости

*******************************************************************************

Если в хедере нужно объявление типа из другого файла, то используем предварительное
объявление (forward declaration)
Этот механизм используется, в основном для классов, когда нужно использовать
пользовательский тип, который находится ниже в тексте программы
Это как с объявлением функций, даем компилятору свое честноt слово о существовании
такой сущности
При использовании предварительных объявлений возможно создать только указатели и
ссылки. Чтобы создать полноценный объект, необходимо уже знать определение его типа

*******************************************************************************

Имена приватных членов класса должны начинаться с нижнего подчеркивания (_name)
Это дает более быстрое понимание кода при его чтении

*******************************************************************************

Глобальные перечисления должны быть заключены в свои пространства имен, иначе
будет ошибка, связанная с переопределением констант, причем для каждого
перечисления свое пространство

*******************************************************************************

Всегда явно указывать дробную часть вещественного числа, даже если она равна
нулю (.0f)

*******************************************************************************
