*******************************************************************************

v 0.24a

UnitTest:
+ Доработки в уже реализованных тестах
+ Реализованы тесты для resize(count), resize(count, value) и swap()

My::Vector:
+ Исправления в resize(count) и в resize(count, value) на основе юнит-тестов

*******************************************************************************

v 0.23a

UnitTest:
+ Подправлены тесты для конструкторов, operator=(& other) и operator==()
+ Реализованы тесты для operator=(initializer_list), empty(), reserve(),
shrink_to_fit(), push_back(), pop_back(), clear()


*******************************************************************************

v 0.22a

UnitTest:
+ Добавлен проект для проведения юнит-тестирования My::Vector
+ Реализованы тесты для конструкторов, operator=(& other) и operator==()

My::Vector:
+ Реализован operator==()

TestType:
+ Реализованы operator==(), operator!=()

*******************************************************************************

v 0.21a

My::Vector:
+ Методы доработаны до логической завершенности (на мой взгляд)
+ Доработана обработка исключений

TestType:
+ Доработана обработка исключений

*******************************************************************************

v 0.20a

My::Vector:
+ Добавлена обработка исключений во все конструкторы, кроме
конструктора копирования
+ Доработаны методы из раздела Element Access, а также empty(),
pop_back() и clear() из других разделов

*******************************************************************************

v 0.19a

My::Vector:
+ Начал обработку исключений

Test:
+ Начал доработку исключений

Tree:
+ Проект исключен из решения

*******************************************************************************

v 0.18a

TestType:
+ Доделан и отлажен, протестирован с My::Vector
+ Добавлена отладочная печать, выводящая адреса объектов при создании и
уничтожении, чтобы можно было пронаблюдать, кто, кого и когда создал, кто и чьей
копией является, кто и когда был уничтожен

*******************************************************************************

v 0.17a

+ Решена проблема с линковкой, когда сыпались сплошные unresolved symbols. Дело
оказалось не в Test, а в том, что для сборки одного проекта с использованием
функционала из другого, необходимы объектные файлы, которые содержат реализации
функций. Поэтому, нужно было собрать статическую библиотеку и либо указать путь
до нее, если это просто разные проекты, либо через создание ссылки в одном
проекте на другой, если это разные проекты в рамках одного решения
+ Почти доделан TestType с использованием исключений

*******************************************************************************

v 0.16a

Tree:
+ Доработана _destruct_nodes(), до этого освобождалась память только из под корня.
Теперь происходит освобождение памяти из под всех узлов, в том числе и корня.
+ Как оказалось, _search_node() возвращала нужное значение только тогда, когда
искомый узел был последним потомком текущего узла. Исправлено
+ Добавлена mark_as_destructed() для выставления метки о том, что память из под
объекта, адрес которого хранится в key, была освобождена

Test:
+ Начал переделывать с нуля

*******************************************************************************

v 0.15a

Tree:
+ В дерево неправильно строилось из-за ошибки в логике функции поиска узла
в дереве. Ошибка заключалась в неправильном возвращении значения из функции,
которое терялось в рекурсии. Исправлено

*******************************************************************************

v 0.14a

+ Добавлен проект Tree. Его цель - регистрация событий создания и уничтожения
объектов и представление иерархии взаимоотношений этих объектов в виде
древовидной структуры
+ Реструктуризирован проект, а точнее решение, теперь оно разбито на три проекта:
MyVector, Test и Tree

*******************************************************************************

v 0.13a

My::Vector:
+ Тернарные операторы заменены if-else
+ Убраны "незаконные" использования this
+ Добавлена отладочная печать для возможности просмотра информации об объектах,
кто, кого и как создает, кто, кого и как разрушает. Но это так себе решение,
поэтому я решил создать проект Tree

*******************************************************************************

v 0.12a

My::Vector:
+ Методы раздела Modifiers переделаны. Теперь выделение и освобождение памяти
происходит адекватно, по-крайней мере, насколько я могу судить

*******************************************************************************

v 0.11a

+ В проект добавлены файлы todo.txt, patch_notes.txt и best_practices.txt

*******************************************************************************
v 0.11

+ Проект и прошлые его версии залит на GitHub

My::Vector:
+ Большая часть методов вектора переделаны, кроме раздела Modifiers. Теперь
выделение и освобождение памяти происходит адекватно, по-крайней мере, насколько
я могу судить. Все старые вспомогательные методы из private удалены, вместо их
использования стал писать *в лоб*, так проще уследить за использованием памяти.
Поэтому имеется очень много повторяющегося кода, который надо *причесать*

*******************************************************************************
